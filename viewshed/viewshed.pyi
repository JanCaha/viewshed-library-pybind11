#
# AUTOMATICALLY GENERATED FILE, DO NOT EDIT!
#

from __future__ import annotations

import typing

import viewshed

__all__ = ["InverseViewshed", "Point", "ProjectedSquareCellRaster", "Viewshed", "VisibilityAlgorithms", "version"]

class InverseViewshed:
    def __init__(
        self, target_point: Point, observer_offset: float, dem: ProjectedSquareCellRaster, algs: VisibilityAlgorithms
    ) -> None: ...
    @typing.overload
    def calculate(self) -> None: ...
    @typing.overload
    def calculate(
        self, print_timing_func: typing.Callable[[str, float], None], print_done_func: typing.Callable[[int, int], None]
    ) -> None: ...
    def saveResults(self, folder: str) -> None: ...
    def setMaxThreads(self, threads_number: int) -> None: ...
    pass

class Point:
    def __init__(self, arg0: float, arg1: float, dem: ProjectedSquareCellRaster, arg3: float) -> None: ...
    def isValid(self) -> bool: ...
    pass

class ProjectedSquareCellRaster:
    @typing.overload
    def __init__(self, path: str, band: int) -> None: ...
    @typing.overload
    def __init__(self, path: str) -> None: ...
    def error(self) -> str: ...
    def noData(self) -> float: ...
    pass

class Viewshed:
    def __init__(self, observer_point: Point, dem: ProjectedSquareCellRaster, algs: VisibilityAlgorithms) -> None: ...
    @typing.overload
    def calculate(self) -> None: ...
    @typing.overload
    def calculate(
        self, print_timing_func: typing.Callable[[str, float], None], print_done_func: typing.Callable[[int, int], None]
    ) -> None: ...
    def saveResults(self, folder: str) -> None: ...
    def setMaxThreads(self, threads_number: int) -> None: ...
    pass

class VisibilityAlgorithms:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, single_algorithm: bool) -> None: ...
    @typing.overload
    def __init__(self, single_algorithm: bool, invisible_value: float) -> None: ...
    def size(self) -> int: ...
    pass

version = "2.6.4"
